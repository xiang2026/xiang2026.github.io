{"title":"从购买到部署，VPS+hexo博客构建记录 其之二","slug":"从购买到部署，VPS+hexo博客构建记录 其之二","date":"2018-01-31T14:25:44.000Z","updated":"2019-07-30T13:43:13.910Z","comments":true,"path":"api/articles/从购买到部署，VPS+hexo博客构建记录 其之二.json","photos":[],"link":"","excerpt":" [Figure] 上篇中我们做完了VPS的基本部署，在这篇里面可以进行自己的blog构建了。本篇中依然有很多的流水账，我会尽量将我自己踩过的坑写出来。在本篇中你将会看到：如何在本地搭建Hexo系统，如何在本地编写自己的blog，如何修改blog的主题样式，以及如何启动本地的服务器进行预览。如何使用nginx作为Hexo静态页面的Http服务器。如何将自己的blog部署至远程服务器。如何使用github student package中的Namecheap一年免费域名和隐私保护，如何使用Namecheap自带的DNS解析服务。","covers":null,"content":"<p><img src=\"/2018/01/31/从购买到部署，VPS+hexo博客构建记录 其之二/title.jpg\" alt=\"title\"></p>\n<p>上篇中我们做完了VPS的基本部署，在这篇里面可以进行自己的blog构建了。本篇中依然有很多的流水账，我会尽量将我自己踩过的坑写出来。</p>\n<p>在本篇中你将会看到：</p>\n<ul>\n<li>如何在本地搭建Hexo系统，如何在本地编写自己的blog，如何修改blog的主题样式，以及如何启动本地的服务器进行预览。</li>\n<li>如何使用nginx作为Hexo静态页面的Http服务器。</li>\n<li>如何将自己的blog部署至远程服务器。</li>\n<li>如何使用github student package中的Namecheap一年免费域名和隐私保护，如何使用Namecheap自带的DNS解析服务。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"1-在本地搭建Hexo并开始自己的blog书写\"><a href=\"#1-在本地搭建Hexo并开始自己的blog书写\" class=\"headerlink\" title=\"1. 在本地搭建Hexo并开始自己的blog书写\"></a>1. 在本地搭建Hexo并开始自己的blog书写</h2><p>Hexo是一套基于Node.js的快速，简洁高效的博客框架，它的主要职责是将你编写的markdown文件根据模板设置渲染成静态网页，关于Hexo的细节介绍参见<a href=\"https://hexo.io\" target=\"_blank\" rel=\"noopener\">官网</a>。</p>\n<p>在本地搭建Hexo非常简单，官网上也给出了具体的步骤说明。简单概括可以分为安装Node.js，安装Hexo框架，初始化blog，编写（可选），启动服务。</p>\n<p>Node.js的安装包可以在Node.js的<a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">官网</a>获取。Node.js的安装包会同时安装npm工具，之后我们就可以在命令行中使用npm命令了，安装完成后先使用命令检测安装是否成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<p>若有版本号输出就说明安装完成了，此时就可以使用下面的一系列命令安装并在本地启动Hexo了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g  <span class=\"comment\">#全局安装hexo-cli工具</span></span><br><span class=\"line\">hexo init blog   <span class=\"comment\">#初始化blog</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog   </span><br><span class=\"line\">npm install   <span class=\"comment\">#安装hexo依赖包</span></span><br><span class=\"line\">hexo server   <span class=\"comment\">#启动服务</span></span><br></pre></td></tr></table></figure>\n<p>这个时候，Hexo会使用Node.js的服务在本地启动http服务器，访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">本地4000端口</a>，即可看到初始化的blog。</p>\n<p><img src=\"/2018/01/31/从购买到部署，VPS+hexo博客构建记录 其之二/02.jpg\" alt=\"02\"></p>\n<p>此时你本地的系统已经完成，可以开始写blog了。在Hexo系统中写blog基本流程是这样，使用命令生成文章md文件，使用markdown编辑器修改，编写自己的文章，使用命令生成静态页面。</p>\n<p>首先使用命令生成文章md文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [your article title]</span><br></pre></td></tr></table></figure>\n<p>Hexo默认的文章位置在blog目录下的/source/_post文件夹内，执行完上述命令后进入该文件夹你会发现有一个以你刚刚输入的文章标题为名称的markdown文件生成了，同时这个文件夹内还有一个名叫Hello World的markdown文件，这个是Hexo自带的介绍文章，之前你打开本地的blog网站看到的那一篇文章就是用它的内容渲染出来的。打开你自己生成的md文件，可以看到有几行yaml格式的信息出现在最开始，分别标记了你文章的标题信息，创建时间等，同时还有一个空缺的tag分类信息，可以用来添加文章tag。文章的正文内容是没有的，需要你自己填写，发挥你的文学功底吧，同时不用太在意格式，这些Hexo会帮你弄好，内容永远是最重要的。</p>\n<p>写完blog并保存后我们就可以使用命令生成文章了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate <span class=\"comment\">#或者写hexo g</span></span><br></pre></td></tr></table></figure>\n<p>此时，Hexo系统会检测source文件夹下的所有md文件，并根据其中的yaml信息生成对应的静态页面，重启本地的服务器并刷新就可以看到你刚刚添加的文章了。</p>\n<p>最后再来说说主题，默认的主题是比较简单的，好在Hexo有着非常丰富的主题扩展，你可以访问官方的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题网站</a>下载喜欢的主题，将下载好的主题文件放在blog文件夹下的themes文件夹内，并修改blog系统根目录下的的配置文件_config.yml，将theme属性的值改为你下载主题的名称，使之使用你下载的主题进行渲染即可。</p>\n<p><img src=\"/2018/01/31/从购买到部署，VPS+hexo博客构建记录 其之二/03.jpg\" alt=\"03\"></p>\n<p>至此，我们在本地完成了构建blog的所有步骤，并且已经可以通过编写md文件渲染对应的文章页面，但此时blog仅仅只是在本地可见，其他人是没办法访问我们的网站的。下一步，我们需要将生成的静态页面部署至我们购买的VPS服务器，但在那之前，我们还需要在VPS上构建一个http服务器用以提供http访问服务。</p>\n<h2 id=\"2-使用Nginx作为Http服务器\"><a href=\"#2-使用Nginx作为Http服务器\" class=\"headerlink\" title=\"2. 使用Nginx作为Http服务器\"></a>2. 使用Nginx作为Http服务器</h2><p>Nginx是一个高效的Http服务器软件，同时也是一个代理服务器软件。在工程上，Nginx更多的被用于做内部反代，负载均衡。在这里，我们仅仅使用其最基本的Http服务功能。</p>\n<p>使用apt-get安装Nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install nginx</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，我们可以先启动一下nginx看看效果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n<p>此时通过浏览器访问VPS的ip地址，应该可以看到Nginx的默认页面，Welcome to nginx，并告知nginx启动成功。现在我们就可以配置nginx作为自己的http服务器了。</p>\n<p>nginx安装完成后的虚拟主机配置都放在/etc/nginx/site-available文件夹下面，这里我们直接修改默认的default作为blog的虚拟主机配置。使用vim打开default文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/site-available/default</span><br></pre></td></tr></table></figure>\n<p>修改成下面这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">\tlisten 80 default_server;</span><br><span class=\"line\">\tlisten [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># SSL configuration</span></span><br><span class=\"line\">\t<span class=\"comment\">#</span></span><br><span class=\"line\">\t<span class=\"comment\"># listen 443 ssl default_server;</span></span><br><span class=\"line\">\t<span class=\"comment\"># listen [::]:443 ssl default_server;</span></span><br><span class=\"line\">\t<span class=\"comment\">#</span></span><br><span class=\"line\">\t<span class=\"comment\"># Note: You should disable gzip for SSL traffic.</span></span><br><span class=\"line\">\t<span class=\"comment\"># See: https://bugs.debian.org/773332</span></span><br><span class=\"line\">\t<span class=\"comment\">#</span></span><br><span class=\"line\">\t<span class=\"comment\"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class=\"line\">\t<span class=\"comment\"># See: https://bugs.debian.org/765782</span></span><br><span class=\"line\">\t<span class=\"comment\">#</span></span><br><span class=\"line\">\t<span class=\"comment\"># Self signed certs generated by the ssl-cert package</span></span><br><span class=\"line\">\t<span class=\"comment\"># Don't use them in a production server!</span></span><br><span class=\"line\">\t<span class=\"comment\">#</span></span><br><span class=\"line\">\t<span class=\"comment\"># include snippets/snakeoil.conf;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\troot /home/[your user name]/blog; <span class=\"comment\">#此处根据你自己的设置写，填写的是你放置网站静态页面的目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># Add index.php to the list if you are using PHP</span></span><br><span class=\"line\">\tindex index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\">\tserver_name [your server name];  <span class=\"comment\">#可以填写你自己的域名，也可以空着</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\"># First attempt to serve request as file, then</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># as directory, then fall back to displaying a 404.</span></span><br><span class=\"line\">\t\ttry_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改完了之后重启nginx服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br></pre></td></tr></table></figure>\n<p>此时再通过ip访问时会出现403或者404的页面，这说明我们的配置已经完成了，由于我们目前还没有建网站root目录，nginx根据配置找不到index页面文件，因此返回404。创建对应的目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /home/[your user name]/blog</span><br></pre></td></tr></table></figure>\n<p>然后，将之前生成的blog的静态文件上传到这个目录内，再通过浏览器访问你VPS的ip，此时，你应该可以看到你之前在本地看到的网站页面了。</p>\n<h2 id=\"3-部署Hexo\"><a href=\"#3-部署Hexo\" class=\"headerlink\" title=\"3. 部署Hexo\"></a>3. 部署Hexo</h2><p>其实上一部的最后我们上传文件就算是一种部署方式了，但是这种方式很不方便。我们一方面要在本地生成，还要将文件全部上传，随着我们blog文章数量不断增加，每次上传都需要大量的时间，还需要先通过ssh工具连接VPS，两三次以后估计写blog的那点乐趣都被部署的过程消磨殆尽了。</p>\n<p>Hexo官方提供了很多种部署方式，从git到rsync，然而不幸的是，在我的系统配置下git和rsync都不能很好的工作，最后我单独在本地配置了rsync，采用powershell脚本的形式将部署命令脚本化，变相的实现了自动化部署。</p>\n<p>关于Hexo的部署，我们需要知道的是，在使用hexo g命令生成静态文件后，所有的静态页面资源都被放在publish文件夹下，我们要做的就是将这个文件夹下的文件上传到我们刚刚在VPS上建立的那个文件夹里。为了减少文件传输数量，我们在这里使用了rsync工具进行文件同步。</p>\n<p>rsync是一个基于“rsync”算法的文件同步软件，它可以比较本地和远程文件夹内容的不同，仅传输缺少的文件，从而降低网络带宽的占用。ubuntu16.04是默认安装该软件的，在bash环境下输入rsync就可以看到对应的帮助信息。在windows下我们需要自己安装cwRsync软件实现对应的功能，访问<a href=\"https://itefix.net/cwrsync\" target=\"_blank\" rel=\"noopener\">itefix</a>下载最新版本并解压，然后将文件夹下的bin目录路径添加至系统的Path环境变量，此时在powershell或者cmd内输入rsync就可以看到和VPS上一样的帮助信息了。至此，本地rsync配置完毕。</p>\n<p>rsync的同步有着两种模式，一种是域模式，在这种模式下互相同步的两台必须加入同一个配置域。这种模式的好处是可以自动检测文件变动并同步，但是坏处是必须进行非常多的配置。另一种模式是单端同步，有点类似于推送，这种模式只需要可以通过ssh访问目标目录即可。Hexo提供的rsync部署插件也是通过这种方式进行同步部署的。我们使用单端的推送模式，在本地rsync可以工作之后在命令行内执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -avz -e <span class=\"string\">'ssh -p [your ssh port]'</span> public/ [user name]@[your ip]:/home/[user name]/blog</span><br></pre></td></tr></table></figure>\n<p>其中，-p后面填写你的ssh登陆端口，由于我们之前改过自己的ssh登陆端口，因此在登陆的时候需要指定，否则会被防火墙拒绝访问。用户名和ip按照你的配置填写即可。</p>\n<p>之后命令行会提示你输入自己的ssh登陆密码，完成后就可以看到rsync开始上传你的文件了。如果出现访问权限不够等问题请检查你自己的密码输入以及ssh登陆用户是否对nginx网站root目录具有写权限。</p>\n<p>同时你还可以将上面的命令写成脚本，之后生成完成之后只需要运行脚本就可以完成部署，和官方自己的部署插件相比并没有什么区别。</p>\n<p>到这里，blog本身的所有相关部署和搭建均已完成，你可以在本地开心的写blog并部署在远程VPS了。但是，现在我们的网站还只能通过ip访问，非常不便，想让blog有更多的知名度，一个好记的域名是必不可少的。好在我们之前申请的github student package内还包含有一个NameCheap的一年免费域名使用码，通过这个我们可以给我们的blog加上域名，使之可以通过域名访问。</p>\n<h2 id=\"4-Namecheap域名申请\"><a href=\"#4-Namecheap域名申请\" class=\"headerlink\" title=\"4. Namecheap域名申请\"></a>4. Namecheap域名申请</h2><p>在开始域名申请前先注册一个Namecheap的账号。</p>\n<p>打开你申请到的github student package，向下拉可以看到Namecheap的优惠券。</p>\n<p><img src=\"/2018/01/31/从购买到部署，VPS+hexo博客构建记录 其之二/04.jpg\" alt=\"04\"></p>\n<p>点击上面的Namecheap链接，进入Namecheap的域名选择页面</p>\n<p><img src=\"/2018/01/31/从购买到部署，VPS+hexo博客构建记录 其之二/05.jpg\" alt=\"05\"></p>\n<p>在方框里填写你想要的域名，看看是不是已经被注册过了</p>\n<p><img src=\"/2018/01/31/从购买到部署，VPS+hexo博客构建记录 其之二/06.jpg\" alt=\"06\"></p>\n<p>点击上面的ADD将其加入到你的order里面，然后点击右边的complete order进行付款，由于此时这个域名是免费的，因此你不需要付款，系统会提示你登陆你的namecheap账户，将这个order加入到你的账户里。之后在你Namecheap的domain list页面下就可以看到你买到的这个域名了，可以使用一年。有时候系统会有点慢，购买完成之后需要等一会域名才会显示出来。</p>\n<p>接下来我们就需要配置这个域名的DNS解析了，将这个域名与你自己的ip对应。点击domain list下你自己的域名右边的manage按钮，进行配置。</p>\n<p><img src=\"/2018/01/31/从购买到部署，VPS+hexo博客构建记录 其之二/07.jpg\" alt=\"07\"></p>\n<p>这里我们使用Namecheap提供的域名解析服务，点击Advanced DNS标签，在下面新增一个A record，host填写“@”或者“www”(分别对应spicywolf.me和<a href=\"http://www.spicywolf.me两种访问域名)，Value填写你自己的ip即可，TTL默认自动。等十几分钟让域名服务器将你的域名解析配置同步出去，就可以通过域名访问你自己的blog了，在浏览器里输入你的域名看看效果吧。\" target=\"_blank\" rel=\"noopener\">www.spicywolf.me两种访问域名)，Value填写你自己的ip即可，TTL默认自动。等十几分钟让域名服务器将你的域名解析配置同步出去，就可以通过域名访问你自己的blog了，在浏览器里输入你的域名看看效果吧。</a></p>\n<p><img src=\"/2018/01/31/从购买到部署，VPS+hexo博客构建记录 其之二/08.jpg\" alt=\"08\"></p>\n<p>至此，一个正真的可通过域名访问的独立blog就完成了，以后需要做的就只剩下不断通过好文章去充实它，在本地编写完成之后渲染并同步到远程文件目录，最后就可以通过浏览器在任何地方访问了。</p>\n<p>Horo·C</p>\n","categories":[],"tags":[{"name":"建站","slug":"建站","count":3,"path":"api/tags/建站.json"}]}